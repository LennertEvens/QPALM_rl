name: Python Wheels

on:
  push:
  release:
    types: ['released', 'prereleased']

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Build
      run: |
        docker run --platform amd64 --rm -t -v$PWD:$PWD \
          --entrypoint $PWD/scripts/ci/build-wheel.sh \
          ghcr.io/tttapa/docker-qpalm-build:gcc11-py${{ matrix.python-version }}
    - name: Upload Wheel
      uses: actions/upload-artifact@v2
      with:
        name: qpalm-whl-${{ matrix.python-version }}-amd64
        path: wheelhouse/qpalm-*manylinux*.whl
    - name: Upload source
      uses: actions/upload-artifact@v2
      with:
        name: qpalm-src-${{ matrix.python-version }}
        path: dist/qpalm-*.tar.gz

  build-linux-arm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Build
      run: |
        docker run --platform arm64 --rm -t -v$PWD:$PWD \
          --entrypoint $PWD/scripts/ci/build-wheel.sh \
          ghcr.io/tttapa/docker-qpalm-build:gcc11-py${{ matrix.python-version }}
    - name: Upload Wheel
      uses: actions/upload-artifact@v2
      with:
        name: qpalm-whl-${{ matrix.python-version }}-arm64
        path: wheelhouse/qpalm-*manylinux*.whl

  test-linux:
    needs: [build-linux, build-linux-arm]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
        platform: ['amd64', 'arm64']
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/download-artifact@v2
      with:
        name: qpalm-whl-${{ matrix.python-version }}-${{ matrix.platform }}
        path: dist
    - name: Set up QEMU
      if: ${{ matrix.platform != 'amd64' }}
      uses: docker/setup-qemu-action@v1
    - name: Build
      run: |
        docker run --platform ${{ matrix.platform }} --rm -t -v$PWD:$PWD \
          --entrypoint $PWD/scripts/ci/test-wheel.sh \
          python:${{ matrix.python-version }}-bullseye

  build-windows:
    runs-on: windows-2022
    strategy:
      matrix:
        include:
          - python-version: '3.8'
            full-python-version: '3.8.10'
          - python-version: '3.9'
            full-python-version: '3.9.10'
          - python-version: '3.10'
            full-python-version: '3.10.2'
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      name: Install Python
      with: 
        python-version: ${{ matrix.full-python-version }}
    - name: Cache Virtual Environment
      id: cache-venv
      uses: actions/cache@v2
      with:
        path: py-venv
        key: ${{ runner.os }}-${{ matrix.full-python-version }}-${{ hashFiles('scripts/install-eigen.ps1') }}
    - name: Install Python Dependencies 
      if: steps.cache-venv.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        python -m venv py-venv
        ./py-venv/Scripts/Activate.ps1
        ./scripts/install-eigen.ps1
        python -m pip install build cmake
      env:
        CXXFLAGS: "/bigobj"
        CFLAGS: "/bigobj"
    - name: Build
      shell: powershell
      run: |
        ./py-venv/Scripts/Activate.ps1
        $env:CMAKE_PREFIX_PATH = $env:VIRTUAL_ENV + ";" + $env:CMAKE_PREFIX_PATH
        python -m build . --wheel
      env:
        CXXFLAGS: "/bigobj"
        CFLAGS: "/bigobj"
        PYTHONUTF8: 1
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: qpalm-whl-${{ matrix.python-version }}-win
        path: dist/qpalm-*win*.whl

  test-windows:
    needs: [build-windows]
    runs-on: windows-2022
    strategy:
      matrix:
        include:
          - python-version: '3.8'
            full-python-version: '3.8.10'
          - python-version: '3.9'
            full-python-version: '3.9.10'
          - python-version: '3.10'
            full-python-version: '3.10.2'
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      name: Install Python
      with: 
        python-version: ${{ matrix.full-python-version }}
    - uses: actions/download-artifact@v2
      with:
        name: qpalm-whl-${{ matrix.python-version }}-win
        path: dist
    - name: Install
      run: python -m pip install --find-links=dist qpalm
    - name: Test
      run: |
        python -m pip install pytest
        pytest -rP

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      name: Install Python
      with: 
        python-version: ${{ matrix.python-version }}
    - name: Cache Virtual Environment
      id: cache-venv
      uses: actions/cache@v2
      with:
        path: py-venv
        key: ${{ runner.os }}-${{ matrix.full-python-version }}-${{ hashFiles('scripts/install-eigen.sh') }}
    - name: Install Python Dependencies 
      if: steps.cache-venv.outputs.cache-hit != 'true'
      run: |
        python -m venv py-venv
        source ./py-venv/bin/activate
        ./scripts/install-eigen.sh
        python -m pip install build
    - name: Build
      run: |
        source ./py-venv/bin/activate
        CMAKE_PREFIX_PATH="$VIRTUAL_ENV:$CMAKE_PREFIX_PATH" \
            python -m build . --wheel
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: qpalm-whl-${{ matrix.python-version }}-mac
        path: dist/qpalm-*.whl

  test-macos:
    needs: build-macos
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      name: Install Python
      with: 
        python-version: ${{ matrix.python-version }}
    - uses: actions/download-artifact@v2
      with:
        name: qpalm-whl-${{ matrix.python-version }}-mac
        path: dist
    - name: Install
      run: python -m pip install ./dist/qpalm-*.whl
    - name: Test
      run: |
        python -m pip install pytest
        pytest -rP

  release:
    if: ${{ github.event.action == 'released' || github.event.action == 'prereleased' }}
    needs: [test-linux, test-windows, test-macos]
    runs-on: ubuntu-latest
    container: python:${{ matrix.python-version }}-bullseye
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
    - uses: actions/checkout@v1
    - uses: actions/download-artifact@v2
      with:
        name: qpalm-whl-${{ matrix.python-version }}-arm64
        path: dist
    - uses: actions/download-artifact@v2
      with:
        name: qpalm-whl-${{ matrix.python-version }}-amd64
        path: dist
    - uses: actions/download-artifact@v2
      with:
        name: qpalm-whl-${{ matrix.python-version }}-win
        path: dist
    - uses: actions/download-artifact@v2
      with:
        name: qpalm-whl-${{ matrix.python-version }}-mac
        path: dist
    - name: Install qpalm
      run: pip install --find-links=dist qpalm
    - name: 'Check qpalm version'
      run: |
        [ "${{ github.event.release.tag_name }}" == "$(python -c 'from importlib.metadata import version as v; print(v("qpalm"))')" ]
      shell: bash
    - name: Install Twine
      run: pip install twine
    - name: Upload Wheel to PyPI
      run: python -m twine upload dist/qpalm-*.whl
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PyPI }}
    - uses: actions/download-artifact@v2
      if: ${{ matrix.python-version == '3.10' }}
      with:
        name: qpalm-src-${{ matrix.python-version }}
        path: dist
    - name: Upload source to PyPI
      if: ${{ matrix.python-version == '3.10' }}
      run: python -m twine upload dist/qpalm-*.tar.gz
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PyPI }}
